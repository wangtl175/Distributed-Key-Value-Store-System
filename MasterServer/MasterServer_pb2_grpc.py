# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import MasterServer_pb2 as MasterServer__pb2


class MasterServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.heart = channel.unary_unary(
                '/MasterServer.MasterServer/heart',
                request_serializer=MasterServer__pb2.Empty.SerializeToString,
                response_deserializer=MasterServer__pb2.Reply.FromString,
                )
        self.add_chunk = channel.unary_unary(
                '/MasterServer.MasterServer/add_chunk',
                request_serializer=MasterServer__pb2.Chunk.SerializeToString,
                response_deserializer=MasterServer__pb2.Reply.FromString,
                )
        self.get_chunk = channel.unary_unary(
                '/MasterServer.MasterServer/get_chunk',
                request_serializer=MasterServer__pb2.Key.SerializeToString,
                response_deserializer=MasterServer__pb2.Chunk.FromString,
                )
        self.insert_key = channel.unary_unary(
                '/MasterServer.MasterServer/insert_key',
                request_serializer=MasterServer__pb2.Key.SerializeToString,
                response_deserializer=MasterServer__pb2.Chunk.FromString,
                )
        self.delete_key = channel.unary_unary(
                '/MasterServer.MasterServer/delete_key',
                request_serializer=MasterServer__pb2.Key.SerializeToString,
                response_deserializer=MasterServer__pb2.Chunk.FromString,
                )
        self.replace_chunk = channel.unary_unary(
                '/MasterServer.MasterServer/replace_chunk',
                request_serializer=MasterServer__pb2.Replace.SerializeToString,
                response_deserializer=MasterServer__pb2.Reply.FromString,
                )
        self.add_secondary = channel.unary_unary(
                '/MasterServer.MasterServer/add_secondary',
                request_serializer=MasterServer__pb2.Secondary.SerializeToString,
                response_deserializer=MasterServer__pb2.Reply.FromString,
                )
        self.sync_directory = channel.unary_stream(
                '/MasterServer.MasterServer/sync_directory',
                request_serializer=MasterServer__pb2.Empty.SerializeToString,
                response_deserializer=MasterServer__pb2.Directory.FromString,
                )
        self.sync_chunks = channel.unary_stream(
                '/MasterServer.MasterServer/sync_chunks',
                request_serializer=MasterServer__pb2.Empty.SerializeToString,
                response_deserializer=MasterServer__pb2.Chunk.FromString,
                )
        self.get_primary = channel.unary_unary(
                '/MasterServer.MasterServer/get_primary',
                request_serializer=MasterServer__pb2.Empty.SerializeToString,
                response_deserializer=MasterServer__pb2.Primary.FromString,
                )


class MasterServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def heart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_chunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_chunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replace_chunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_secondary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sync_directory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sync_chunks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_primary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'heart': grpc.unary_unary_rpc_method_handler(
                    servicer.heart,
                    request_deserializer=MasterServer__pb2.Empty.FromString,
                    response_serializer=MasterServer__pb2.Reply.SerializeToString,
            ),
            'add_chunk': grpc.unary_unary_rpc_method_handler(
                    servicer.add_chunk,
                    request_deserializer=MasterServer__pb2.Chunk.FromString,
                    response_serializer=MasterServer__pb2.Reply.SerializeToString,
            ),
            'get_chunk': grpc.unary_unary_rpc_method_handler(
                    servicer.get_chunk,
                    request_deserializer=MasterServer__pb2.Key.FromString,
                    response_serializer=MasterServer__pb2.Chunk.SerializeToString,
            ),
            'insert_key': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_key,
                    request_deserializer=MasterServer__pb2.Key.FromString,
                    response_serializer=MasterServer__pb2.Chunk.SerializeToString,
            ),
            'delete_key': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_key,
                    request_deserializer=MasterServer__pb2.Key.FromString,
                    response_serializer=MasterServer__pb2.Chunk.SerializeToString,
            ),
            'replace_chunk': grpc.unary_unary_rpc_method_handler(
                    servicer.replace_chunk,
                    request_deserializer=MasterServer__pb2.Replace.FromString,
                    response_serializer=MasterServer__pb2.Reply.SerializeToString,
            ),
            'add_secondary': grpc.unary_unary_rpc_method_handler(
                    servicer.add_secondary,
                    request_deserializer=MasterServer__pb2.Secondary.FromString,
                    response_serializer=MasterServer__pb2.Reply.SerializeToString,
            ),
            'sync_directory': grpc.unary_stream_rpc_method_handler(
                    servicer.sync_directory,
                    request_deserializer=MasterServer__pb2.Empty.FromString,
                    response_serializer=MasterServer__pb2.Directory.SerializeToString,
            ),
            'sync_chunks': grpc.unary_stream_rpc_method_handler(
                    servicer.sync_chunks,
                    request_deserializer=MasterServer__pb2.Empty.FromString,
                    response_serializer=MasterServer__pb2.Chunk.SerializeToString,
            ),
            'get_primary': grpc.unary_unary_rpc_method_handler(
                    servicer.get_primary,
                    request_deserializer=MasterServer__pb2.Empty.FromString,
                    response_serializer=MasterServer__pb2.Primary.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterServer.MasterServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def heart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer.MasterServer/heart',
            MasterServer__pb2.Empty.SerializeToString,
            MasterServer__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_chunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer.MasterServer/add_chunk',
            MasterServer__pb2.Chunk.SerializeToString,
            MasterServer__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_chunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer.MasterServer/get_chunk',
            MasterServer__pb2.Key.SerializeToString,
            MasterServer__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer.MasterServer/insert_key',
            MasterServer__pb2.Key.SerializeToString,
            MasterServer__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer.MasterServer/delete_key',
            MasterServer__pb2.Key.SerializeToString,
            MasterServer__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replace_chunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer.MasterServer/replace_chunk',
            MasterServer__pb2.Replace.SerializeToString,
            MasterServer__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_secondary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer.MasterServer/add_secondary',
            MasterServer__pb2.Secondary.SerializeToString,
            MasterServer__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sync_directory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MasterServer.MasterServer/sync_directory',
            MasterServer__pb2.Empty.SerializeToString,
            MasterServer__pb2.Directory.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sync_chunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MasterServer.MasterServer/sync_chunks',
            MasterServer__pb2.Empty.SerializeToString,
            MasterServer__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_primary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer.MasterServer/get_primary',
            MasterServer__pb2.Empty.SerializeToString,
            MasterServer__pb2.Primary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
